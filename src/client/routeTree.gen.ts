/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProtectedRouteImport } from './routes/_protected/route'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as RouteImport } from './routes/route'
import { Route as ProtectedFilesRouteImport } from './routes/_protected/files/route'

// Create Virtual Routes

const AuthSignUpLazyImport = createFileRoute('/_auth/sign-up')()
const AuthSignInLazyImport = createFileRoute('/_auth/sign-in')()
const ProtectedFilesIndexLazyImport = createFileRoute('/_protected/files/')()

// Create/Update Routes

const ProtectedRouteRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const RouteRoute = RouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AuthSignUpLazyRoute = AuthSignUpLazyImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() => import('./routes/_auth/sign-up.lazy').then((d) => d.Route))

const AuthSignInLazyRoute = AuthSignInLazyImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() => import('./routes/_auth/sign-in.lazy').then((d) => d.Route))

const ProtectedFilesRouteRoute = ProtectedFilesRouteImport.update({
  id: '/files',
  path: '/files',
  getParentRoute: () => ProtectedRouteRoute,
} as any)

const ProtectedFilesIndexLazyRoute = ProtectedFilesIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedFilesRouteRoute,
} as any).lazy(() =>
  import('./routes/_protected/files/index.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof RouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRoute
    }
    '/_protected/files': {
      id: '/_protected/files'
      path: '/files'
      fullPath: '/files'
      preLoaderRoute: typeof ProtectedFilesRouteImport
      parentRoute: typeof ProtectedRouteImport
    }
    '/_auth/sign-in': {
      id: '/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInLazyImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/sign-up': {
      id: '/_auth/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AuthSignUpLazyImport
      parentRoute: typeof AuthRouteImport
    }
    '/_protected/files/': {
      id: '/_protected/files/'
      path: '/'
      fullPath: '/files/'
      preLoaderRoute: typeof ProtectedFilesIndexLazyImport
      parentRoute: typeof ProtectedFilesRouteImport
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthSignInLazyRoute: typeof AuthSignInLazyRoute
  AuthSignUpLazyRoute: typeof AuthSignUpLazyRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthSignInLazyRoute: AuthSignInLazyRoute,
  AuthSignUpLazyRoute: AuthSignUpLazyRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface ProtectedFilesRouteRouteChildren {
  ProtectedFilesIndexLazyRoute: typeof ProtectedFilesIndexLazyRoute
}

const ProtectedFilesRouteRouteChildren: ProtectedFilesRouteRouteChildren = {
  ProtectedFilesIndexLazyRoute: ProtectedFilesIndexLazyRoute,
}

const ProtectedFilesRouteRouteWithChildren =
  ProtectedFilesRouteRoute._addFileChildren(ProtectedFilesRouteRouteChildren)

interface ProtectedRouteRouteChildren {
  ProtectedFilesRouteRoute: typeof ProtectedFilesRouteRouteWithChildren
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedFilesRouteRoute: ProtectedFilesRouteRouteWithChildren,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof RouteRoute
  '': typeof ProtectedRouteRouteWithChildren
  '/files': typeof ProtectedFilesRouteRouteWithChildren
  '/sign-in': typeof AuthSignInLazyRoute
  '/sign-up': typeof AuthSignUpLazyRoute
  '/files/': typeof ProtectedFilesIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof RouteRoute
  '': typeof ProtectedRouteRouteWithChildren
  '/sign-in': typeof AuthSignInLazyRoute
  '/sign-up': typeof AuthSignUpLazyRoute
  '/files': typeof ProtectedFilesIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof RouteRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/_protected/files': typeof ProtectedFilesRouteRouteWithChildren
  '/_auth/sign-in': typeof AuthSignInLazyRoute
  '/_auth/sign-up': typeof AuthSignUpLazyRoute
  '/_protected/files/': typeof ProtectedFilesIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/files' | '/sign-in' | '/sign-up' | '/files/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/sign-in' | '/sign-up' | '/files'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_protected'
    | '/_protected/files'
    | '/_auth/sign-in'
    | '/_auth/sign-up'
    | '/_protected/files/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  RouteRoute: typeof RouteRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  RouteRoute: RouteRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.ts",
      "children": [
        "/",
        "/_auth",
        "/_protected"
      ]
    },
    "/": {
      "filePath": "route.ts"
    },
    "/_auth": {
      "filePath": "_auth/route.ts",
      "children": [
        "/_auth/sign-in",
        "/_auth/sign-up"
      ]
    },
    "/_protected": {
      "filePath": "_protected/route.ts",
      "children": [
        "/_protected/files"
      ]
    },
    "/_protected/files": {
      "filePath": "_protected/files/route.ts",
      "parent": "/_protected",
      "children": [
        "/_protected/files/"
      ]
    },
    "/_auth/sign-in": {
      "filePath": "_auth/sign-in.lazy.ts",
      "parent": "/_auth"
    },
    "/_auth/sign-up": {
      "filePath": "_auth/sign-up.lazy.ts",
      "parent": "/_auth"
    },
    "/_protected/files/": {
      "filePath": "_protected/files/index.lazy.ts",
      "parent": "/_protected/files"
    }
  }
}
ROUTE_MANIFEST_END */
